# -*- coding: utf-8 -*-
"""project_step1_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y61VuidDVfwpNpZJEkG1H1utZDqx_mj0
"""

!pip install finta
!pip install pandas_ta
!pip install ta
!pip install rarfile

import rarfile
import numpy as np
import pandas as pd
from google.colab import files
import datetime
import finta
from finta import TA
import pandas_ta as pd_ta
from ta.trend import ADXIndicator
from ta.momentum import stoch
from ta.volume import on_balance_volume
import ta
import os
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_classif
from matplotlib import pyplot

def Df_builder(path):
  data = pd.read_excel(path)
  # data = data.rename(columns={'تاریخ میلادی':'Time' , '<OPEN>':'Open' , '<HIGH>':'High' ,'<LOW>':'Low' , '<CLOSE>':'Close' , '<VOL>':'Vol' , '<OPENINT>':'Openint'})
  # data = data.set_index(pd.to_datetime(data['Time'] , format='%Y%m%d'))
  # data.drop(data.columns[0:2] , axis=1 , inplace=True)
  data = data.rename(columns={'تاریخ میلادی':'Time' , 'OPEN':'Open' , 'HIGH':'High' ,'LOW':'Low' ,
                              'CLOSE':'Close' , 'VOL':'Vol' , 'OPENINT':'Openint' , 'LABEL':'Label'})
  data = data.set_index(pd.to_datetime(data['Time'] , format='%Y-%m-%d'))
  data.drop(data.columns[0:1] , axis=1 , inplace=True)
  return data

def preprocesing(dataframe , show_details = False):

    nan = dataframe.isna().sum().sum()
    if nan != 0 :
      print(f'\033[91m There are/is {nan} missing values in dataset')


    dataframe['Low'] = np.where(dataframe['Close']<dataframe['Low'], dataframe['Close'] ,dataframe['Low'])
    dataframe['High']= np.where(dataframe['Open']> dataframe['High'],dataframe['Open'] , dataframe['High'])
    dataframe['High']= np.where(dataframe['Close']>dataframe['High'],dataframe['Close'] ,dataframe['High'])
    dataframe['Low'] = np.where(dataframe['Open']< dataframe['Low'], dataframe['Open'] , dataframe['Low'])


    if show_details == True : 
      for i in range(dataframe.shape[0]):
        if dataframe.iloc[i,1] < dataframe.iloc[i,0]:
          print(f.iloc[i , :])
        elif dataframe.iloc[i,3] < dataframe.iloc[i,2]:
          print(dataframe.iloc[i , :])
        elif dataframe.iloc[i,1] < dataframe.iloc[i,3]:
          print(dataframe.iloc[i , :])
        elif dataframe.iloc[i,0] < dataframe.iloc[i,2]:
          print(dataframe.iloc[i , :])

    return dataframe

def Indicator_Builder(data):

    '''
    input : data

    step 1 : build an copy of main data for every indicatior separately
    step 2 : calculate indicatores and keep them in their specific columns
    step 3 : concatenate all of the target columns in final_indicator_df
    '''


    MACD = data.copy()
    RSI = data.copy()
    SMA = data.copy()
    WILIAM = data.copy()
    EMA = data.copy()
    STOCHASTIC = data.copy()
    TR = data.copy()
    ATR = data.copy()
    UOS = data.copy()
    KDJ=data.copy()
    ADX = data.copy()
    OBV = data.copy()
    MFI = data.copy()
    BB = data.copy()
    VWAP = data.copy()
    BIAS = data.copy()


    def MACD_builder(df , span_floor , span_ceil):
      floor = df['Close'].ewm(span=span_floor, adjust=False, min_periods=span_floor).mean()
      ceil = df['Close'].ewm(span=span_ceil, adjust=False, min_periods=span_ceil).mean()
      macd = floor - ceil
      return macd

    def MACD_Trigger_builder(macd , span ):
      trigger = macd.ewm(span=span, adjust=False, min_periods=span).mean()
      macd_trigger = macd - trigger
      return macd_trigger

    macd_716 = MACD_builder(data , 7 , 16 )
    macd_1226 = MACD_builder(data , 12 , 26 )
    macd_1428 = MACD_builder(data , 14 , 28 )

    macd_7169 = MACD_Trigger_builder(macd_716 , 9 )
    macd_122610 = MACD_Trigger_builder(macd_1226 , 10 )
    macd_142811 = MACD_Trigger_builder(macd_1428 , 11 )


    MACD['macd_716'] = macd_716
    MACD['MACD_1226'] = macd_1226
    MACD['macd_1428'] = macd_1428

    MACD['macd_7169'] = macd_7169
    MACD['macd_122610'] = macd_122610
    MACD['macd_142811'] = macd_142811

    ema_15 = pd_ta.ema(EMA['Close'] , length=15)
    ema_20 = pd_ta.ema(EMA['Close'] , length=20)

    EMA['ema_15']=ema_15
    EMA['ema_20']=ema_20

    RSI_15 = pd_ta.rsi(RSI['Close'] ,length=15)
    RSI_20 = pd_ta.rsi(RSI['Close'] ,length=20)
    RSI_25 = pd_ta.rsi(RSI['Close'] ,length=25)
    RSI_30 = pd_ta.rsi(RSI['Close'] ,length=30)

    RSI['RSI_15'] = RSI_15
    RSI['RSI_20'] = RSI_20
    RSI['RSI_25'] = RSI_25
    RSI['RSI_30'] = RSI_30

    sma_20 = SMA['Close'].rolling(window=20).mean()
    sma_15 = SMA['Close'].rolling(window=15).mean()

    SMA['sma_15'] = sma_15
    SMA['sma_20'] = sma_20

    # method 2
        # sma_20 = pd_ta.sma(close=SMA['Close'], length=20, append=True)
        # sma_20 = pd_ta.sma(close=SMA['Close'], length=15, append=True)

    wiliam_14 =  TA.WILLIAMS(WILIAM , period= 14)
    wiliam_18 =  TA.WILLIAMS(WILIAM , period= 18)
    wiliam_20 =  TA.WILLIAMS(WILIAM , period= 20)

    WILIAM['wiliam_14'] = wiliam_14
    WILIAM['wiliam_18'] = wiliam_18
    WILIAM['wiliam_20'] = wiliam_20

    # method 2
    # w_14 = pd_ta.WILIAM(high=wilii['High'] , low=wilii['Low'] , close=wilii['Close'] , length=14)
    # w_18 = pd_ta.WILIAM(high=wilii['High'] , low=wilii['Low'] , close=wilii['Close'] , length=18)
    # w_20 = pd_ta.WILIAM(high=wilii['High'] , low=wilii['Low'] , close=wilii['Close'] , length=20)


    def stochastic(df, k, d):
      df = df.copy()
      low_min  = df['Low'].rolling(window=k).min()
      high_max = df['High'].rolling( window=k).max()
      df['stoch_k'] = 100 * (df['Close'] - low_min)/(high_max - low_min)
      df['stoch_d'] = df['stoch_k'].rolling(window=d).mean()
      return df['stoch_k']
      

    STOCHASTIC['stochk_14'] = stochastic(STOCHASTIC, k=14, d=3)
    STOCHASTIC['stochk_18'] = stochastic(STOCHASTIC, k=18, d=3)
    STOCHASTIC['stochk_20'] = stochastic(STOCHASTIC, k=20, d=3)

    # method 2
    # stochk_14 = TA.STOCH(STOCHASTIC1 , period=20)
    # stochk_18 = TA.STOCH(STOCHASTIC1 , period=20)
    # stochk_20 = TA.STOCH(STOCHASTIC1 , period=20)

    # stochk_14 = stoch(high=STOCHASTIC['High'], low=STOCHASTIC['Low'] , close=STOCHASTIC['Close'], window=14)
    # stochk_18 = stoch(high=STOCHASTIC['High'], low=STOCHASTIC['Low'] , close=STOCHASTIC['Close'], window=18)
    # stochk_20 = stoch(high=STOCHASTIC['High'], low=STOCHASTIC['Low'] , close=STOCHASTIC['Close'], window=20)



    tr = pd_ta.true_range(high=TR['High'], low=TR['Low'] , close=TR['Close'])
    TR['tr'] = tr

    atr = TA.ATR(ATR)
    ATR['atr'] = atr

    uos_71428 = pd_ta.uo(high=UOS['High'], low=UOS['Low'] , close=UOS['Close'] , fast =7 , medium =14 , slow =22 )
    uos_81622 = pd_ta.uo(high=UOS['High'], low=UOS['Low'] , close=UOS['Close'] , fast =8 , medium =16 , slow =28 )
    uos_91836 = pd_ta.uo(high=UOS['High'], low=UOS['Low'] , close=UOS['Close'] , fast =9 , medium =18 , slow =36 )
    UOS['uos_71428'] = uos_71428
    UOS['uos_81622'] = uos_81622
    UOS['uos_91836'] = uos_91836

    kdj = pd_ta.kdj(high=KDJ['High'], low=KDJ['Low'] , close=KDJ['Close'] , length=14 )
    KDJ[['kdj_K' , 'kdj_D' , 'kdj_J']]=kdj

    adx = pd_ta.adx(high=ADX['High'] , low=ADX['Low'] , close=ADX['Close'] , length=14)
    ADX[['ADX' , 'DMP' , 'DMN']] = adx

    # method 2 
    # adx = ta.trend.adx(high=ADX['High'] , low=ADX['Low'] , close=ADX['Close'] )

    obv = pd_ta.obv(close=OBV['Close'] , volume=OBV['Vol'])
    OBV['obv'] = obv

    # method 2
    # OBV1 = data.rename(columns={'Vol':'Volume'})
    # obv1 = TA.OBV(OBV)


    mfi = pd_ta.mfi(high=MFI['High'] , low=MFI['Low'] ,close=MFI['Close'] , volume=MFI['Vol'] , length=14)
    MFI['mfi'] = mfi

    bb = pd_ta.bbands(close=BB['Close'] ,length=14 , std=2)
    BB[['BBL' , 'BBM' , 'BBU' , 'BBB' , 'BBP']] = bb

    vwap = pd_ta.vwap(close=VWAP['Close'] , high=VWAP['High'] , low=VWAP['Low'] , volume=VWAP['Vol'])
    VWAP['vwap'] = vwap

    bias = pd_ta.bias(close=BIAS['Close'] , length=14)
    BIAS['bias'] = bias


    final_indicator_df = pd.concat([data[['Close' , 'Vol']],
                                    MACD['macd_716'],MACD['MACD_1226'],MACD['macd_1428'],MACD['macd_7169'],MACD['macd_122610'] ,MACD['macd_142811'],
                                    EMA['ema_15'],EMA['ema_20'],
                                    RSI['RSI_15'],RSI['RSI_20'],RSI['RSI_25'],RSI['RSI_30'],
                                    SMA['sma_15'],SMA['sma_20'],
                                    WILIAM['wiliam_14'],WILIAM['wiliam_18'],WILIAM['wiliam_20'],
                                    STOCHASTIC['stochk_14'],STOCHASTIC['stochk_18'],STOCHASTIC['stochk_20'],
                                    TR['tr'],
                                    ATR['atr'],
                                    UOS['uos_71428'],UOS['uos_81622'],UOS['uos_91836'],
                                    KDJ[['kdj_K' , 'kdj_D' , 'kdj_J']],
                                    ADX['ADX'],
                                    OBV['obv'],
                                    MFI['mfi'],
                                    BB['BBU'],
                                    VWAP['vwap'],
                                    BIAS['bias'],
                                    data['Label']],
                                  axis = 1)
    
    return final_indicator_df

upload = files.upload()

zip_path = "/content/labeled - Copy.rar"

unzip_path = '/content/test_files'

with rarfile.RarFile(zip_path , 'r') as unrar :
  unrar.extractall(unzip_path)

files = os.listdir(path=unzip_path)
file_paths = [os.path.join(unzip_path , f_name) for f_name in files]




file_paths

def featureSelection(df):
    df = df[40:]
    fs = SelectKBest(score_func=f_classif, k="all")
    fs.fit(df.iloc[:,:-1], df.iloc[:,-1])

    mdict = dict()
    for i in range(len(df.columns)-1):
        mdict[df.columns[i]] = fs.scores_[i]
    

    Scores = sorted(mdict.items(), key=lambda x: x[1] , reverse = True)
    print(Scores)
        
    pyplot.figure(figsize=(16,8))
    pyplot.bar([i for i in range(len(fs.scores_))], fs.scores_)
    pyplot.xticks(list(range(len(df.columns)-1)),list(df.columns[:-1]) , rotation=90)
    pyplot.show()
        
        
    # df.drop(["ema_15","ema_20","sma_15","sma_20","BBU","vwap","tr","atr","Close"] ,axis = 1 ,inplace = True)


    return df

for path in file_paths :
  filename = path.split('/')[-1]
  name = filename.split('.')[0]
  print(path)
  print(name)
  dataframe_preprossed = Df_builder(path)                
  dataframe_posprossed = preprocesing(dataframe_preprossed , show_details=True)
  indicator = Indicator_Builder(dataframe_preprossed)
  result = featureSelection(indicator)
  distination_path = '/content/'+ name +'.csv'
  result.to_csv(distination_path)
  # print(distination_path)
  # print(dataframe_preprossed)
  print(result)
  print('------------------------------------------------------------')

# for i in range(36):
#   print(f"----------{i}----------")

#   for j in range(len(scoresList)):
#     Scores = sorted(scoresList[j].items(), key=lambda x: x[1] , reverse = True)
#     print(Scores[i])